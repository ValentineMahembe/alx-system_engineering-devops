#!/usr/bin/env bash
# This script manages the manage_my_process script.

# Define the path to the manage_my_process script.
MANAGE_MY_PROCESS_SCRIPT="/path/to/manage_my_process"

# Define the path to the PID file.
PID_FILE="/var/run/my_process.pid"

# Define the usage message.
USAGE="Usage: $0 {start|stop|restart}"

# Check the number of arguments.
if [[ $# -ne 1 ]]; then
    echo "$USAGE"
    exit 1
fi

# Handle the start argument.
if [[ $1 == "start" ]]; then
    # Check if the process is already running.
    if [[ -f $PID_FILE ]]; then
        echo "manage_my_process is already running."
        exit 1
    fi

    # Start the manage_my_process script in the background and save the PID.
    "$MANAGE_MY_PROCESS_SCRIPT" &
    echo $! > "$PID_FILE"
    echo "manage_my_process started."
    exit 0
fi

# Handle the stop argument.
if [[ $1 == "stop" ]]; then
    # Check if the process is not running.
    if [[ ! -f $PID_FILE ]]; then
        echo "manage_my_process is not running."
        exit 1
    fi

    # Stop the manage_my_process script and delete the PID file.
    kill "$(cat "$PID_FILE")"
    rm "$PID_FILE"
    echo "manage_my_process stopped."
    exit 0
fi

# Handle the restart argument.
if [[ $1 == "restart" ]]; then
    # Check if the process is running.
    if [[ -f $PID_FILE ]]; then
        # Stop the manage_my_process script and delete the PID file.
        kill "$(cat "$PID_FILE")"
        rm "$PID_FILE"
    fi

    # Start the manage_my_process script in the background and save the PID.
    "$MANAGE_MY_PROCESS_SCRIPT" &
    echo $! > "$PID_FILE"
    echo "manage_my_process restarted."
    exit 0
fi

# Handle invalid arguments.
echo "$USAGE"
exit 1
